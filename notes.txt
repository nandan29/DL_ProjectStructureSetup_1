
1.create an empty folder (which will contain ur entire repo and 
open it in vscode)
2. run "git init" to initialize ur repo in terminal
3. create a readme.md file
4. Do commit (we can do from vs code itself , type msg and click commit [it can ask you for signin])
5. Click on publish branch and then it will ask publish it as public or private .And then its done!!!!
6.Now in Github itelf 
    1) create .gitignore file - add file -> create a new file-> type .gitignore and choose a template python and add file to main branch
    2. create LICENSE file - add file -> create a new file -> type LICENSE and choose a template and add file to main branch

Now what ever changes you have done in github repo itself (like created .gitignore , LICENSE) , to pull all the changes in local
use command - git pull origin main

Now repo got created ,lets create a structure or tempalte first for entire project

1.create template.py file - helps in creating initial structure of my project.Previously we are doing it manually 
when Avnish was teaching ML project structure but now with just one file wwe can create entire project structure.No need 
to do it manually , we just need to run this file.

description of some file
1 .gitkeep - solving problem of GIT not pushing empty folder
 to GITHUB.Helps in keeping the project structure intact.
2.Normally code is present inside src folder , so creating some
folders inside src folder and __init__.py file to indicate it is 
a package
3.configs folder containing all our configuration files
4.dvc.yaml - data version control file.
5.params.yaml - which will contain all out training parameter
at one place.
6.init_setup.sh - helps in setting up the environment , instlling
requirements ,creating environment everything in one go.
7.requirements.txt - contains the list of softwares to be
installed , basically the project requirements
8.requirements_dev.txt - some softwares needed for developement 
purpose only like pytest ,black flake etc etc .
9.setup.cfg , pyproject.toml - these files are used if u r creating
some sort of packages.
10.tox.ini - used for testing the projects locally and creating environments.
11.research/trials.ipynb -  to create jupyter notebooks

###python template.py , run tis command to create project structure template

2. setup.py file - setting up the basic information about the project or package like author name , project description , 
package location etc etc..

3.setup.cfg - conatins metadata information abt the project like license information , programming language on which my package will be 
compatible , package created should be OS independent  ,3rd party library , packages for testing
i) black - checks weather python coding standard is followed or not
ii) tox - helps in testing the application locally and creates different working environment
iii)flake - checks for other things like extra spaces , statement length etc etc
iv)mypy - checks for typing error or spelling mistake
v)pytest - uses for unit testing and integration testing.

4.pyproject.toml - used to indicate what is our build system(version of setup tools ) , pytest isa testing tool and should 
look for which folder for test cases , location of all files where mypy should look for errors , if there are any missing imports just ignore dem...

5.list down all the requirements in requirements.txt and requirements_dev.txt file...

**** unit testing - test of function or class
**** integration testing - when testing two components together
**** -e . -> to install custom package locally like here deepCNN_classifier 

6.tox.ini file - Github Actions (mainly github will look into it) , run series of commands as part of validation for all the test environments which will be created.

7. init_setup.sh - creates env and installs all requirements in one go , no need to write in terminal.
source activate ./env  , will activate the env in the current source and will delete the env , once the project is deleted.

**** echo is like a print statement in shell
***** bash init_setup.sh  , run this command in terminal and then NEW ENV will be created with all requirements installed...

8.src/deepClassifier/utils/common.py - created, so that it contains all the utility functions.

****select the python interpreter (after activating newly created env - conda activate ./env) from bottom as new env is 
created(3.8 reommended , see below bottom right u will find it)


9.In src/deepClassifier/__init__.py file create logging , (der is no need to create a seperate file for logging information
 as we did in Avnish case)


 ########
AVOIDING DEEP IMPORTS

 In order to use any of the utilities defined in common.py , no need to import the file name again and again.Just mention it here 
in __init__.py file and directly we can use all its functionalities in other files , by just calling
from deepClassifier.utils import *
##########


